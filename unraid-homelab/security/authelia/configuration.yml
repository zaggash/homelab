---
###############################################################################
#                           Authelia Configuration                            #
###############################################################################

theme: dark

server:
  address: tcp://0.0.0.0:9091/
  disable_healthcheck: false
  endpoints:
    enable_pprof: false
    enable_expvars: false
  buffers:
    write: 4096
    read: 4096

log:
  level: info

identity_validation:
  reset_password:
    jwt_secret: ${SECRET_AUTHELIA_JWT_SECRET}

totp:
  issuer: ${SECRET_DOMAIN}
  algorithm: sha1
  digits: 6
  period: 30
  skew: 1

authentication_backend:
  ldap:
    implementation: custom
    address: ldap://lldap:3890
    timeout: 5s
    start_tls: false
    base_dn: ${SECRET_LLDAP_BASE_DN}
    attributes:
      username: uid
      # The attribute holding the name of the group.
      group_name: cn
      # Email attribute
      mail: mail
      # The attribute holding the display name of the user. This will be used to greet an authenticated user.
      display_name: displayName
    # You need to set this to ou=people, because all users are stored in this ou!
    additional_users_dn: ou=people
    # To allow sign in both with username and email, one can use a filter like
    # (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
    # Allow only username use a filter like
    # "(&({username_attribute}={input})(objectClass=person))"
    users_filter: "(&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))"
    # Set this to ou=groups, because all groups are stored in this ou
    additional_groups_dn: ou=groups
    # Only this filter is supported right now
    groups_filter: "(member={dn})"
    # The username and password of the admin user.
    # "admin" should be the admin username you set in the LLDAP configuration
    user: "uid=${SECRET_AUTHELIA_LDAP_USER},ou=people,${SECRET_LLDAP_BASE_DN}"
    password: ${SECRET_AUTHELIA_LDAP_PASSWORD}

session:
  name: authelia_session
  same_site: lax
  secret: ${SECRET_AUTHELIA_SESSION_SECRET}
  expiration: 1h
  inactivity: 30m
  remember_me: 1w
  cookies:
    - domain: ${SECRET_DOMAIN}
      authelia_url: https://login.${SECRET_DOMAIN}
      default_redirection_url: https://home.${SECRET_DOMAIN}/
  redis:
    host: authelia-redis
    port: 6379
    password: ${SECRET_AUTHELIA_REDIS_PASSWORD}
    database_index: 0
    maximum_active_connections: 10
    minimum_idle_connections: 0

regulation:
  max_retries: 3
  find_time: 10m
  ban_time: 12h

storage:
  encryption_key: ${SECRET_AUTHELIA_STORAGE_ENCRYPTION_KEY}
  local:
    path: /config/db.sqlite3
  
notifier:
  disable_startup_check: false
  smtp:
    address: "submissions://${SECRET_OVH_SMTP_HOST}:465"
    username: ${SECRET_OVH_SMTP_USERNAME}
    password: ${SECRET_OVH_SMTP_PASSWORD}
    sender: "Authelia <authelia@${SECRET_DOMAIN}>"
    identifier: ${SECRET_DOMAIN}
    tls:
      skip_verify: false
      minimum_version: TLS1.2


access_control:
  ## Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
  ## resource if there is no policy to be applied to the user.
  default_policy: deny

  rules:
    # bypass Authelia login page
    - domain:
        - login.${SECRET_DOMAIN}
      policy: bypass

    # bypass for calibre-web kobo access
    - domain: 
        - books.${SECRET_DOMAIN}
      resources:
        - "^/kobo([/?].*)?$"
      policy: bypass

    # bypass for API
    - domain:
        - "*.${SECRET_DOMAIN}"
      resources:
        - "^/api([/?].*)?$"
      policy: bypass

    # Block Vaultwarden Admin Access
    - domain: pass.${SECRET_DOMAIN}
      resources:
        - "^*/admin.*$"
      subject: 
        - ["group:home_users"]
      policy: two_factor
    # Then bypass vaultwarden to use its own auth
    - domain:
        - pass.${SECRET_DOMAIN}
      policy: bypass

    # Any single password authenticated user can view the landing page
    - domain: 
        - home.${SECRET_DOMAIN}
        - books.${SECRET_DOMAIN}"
      subject:
        - ["group:home_users"]
      policy: one_factor

    # Admin can always access all the services
    - domain:
        - "*.${SECRET_DOMAIN}"
      subject: ["group:home_admin"]
      policy: two_factor
